name: Main CI

# Pipeline meant to run on pull-requests
on: 
  workflow_dispatch: {}
  release:
    types: [created]
  push:
    branches:
      - main

jobs:
  # stage 1: smoke tests
  # - Only depends on tools already available in the base image.
  lint:
    name: Code formatting
    runs-on: ubuntu-20.04 
    steps:
    - uses: actions/checkout@v2
      
    - name: Check clang-format
      run: |
        pwd
        ls -la
        find . -regex '.*\.\(cpp\|h\)'  -exec clang-format-12 -style=file -i -n -Werror {} +

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-20.04 
    env:
      CC: clang-12
      CXX: clang++-12

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug -DABU_HEADER_CHECKS=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest 
    
  # stage 2: Analysis
  clang-tidy:
    needs: [lint, smoke-test]
    name: Clang-tidy
    runs-on: ubuntu-20.04
    env:
      CC: clang-12
      CXX: clang++-12

    steps:
      - uses: actions/checkout@v2

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y clang-tidy-12
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-12 100

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DABU_HEADER_CHECKS=ON

      - name: Normalize directory structure
        run: |
          mkdir build/abu_header_checks 1>/dev/null 2>/dev/null || true
          mkdir src 1>/dev/null 2>/dev/null  || true
          mkdir tests 1>/dev/null 2>/dev/null  || true
          mkdir benchmarks 1>/dev/null 2>/dev/null  || true

      - name: Check with clang-tidy
        run: |  
          find build/abu_header_checks src tests benchmarks -regex '.*\.\(cpp\)' -exec clang-tidy -format-style=file -p build {} +

  sonarqube:
    needs: [lint, smoke-test]
    name: Sonarqube
    runs-on: ubuntu-20.04
    env:
      CC: clang-12
      CXX: clang++-12
      SONAR_SCANNER_VERSION: 4.4.0.2170
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
      - name: Run build-wrapper
        run: |
          mkdir build
          cmake -S . -B build
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

  # stage 3: Validation
  Linux-GCC:
    needs: [clang-tidy, sonarqube]
    runs-on: ubuntu-20.04 
    strategy:
      matrix:
        build_type: [Debug, Release]
    
    name: "üêß gcc-11 - ${{matrix.build_type}}" 
    env:
      CC: gcc-11
      CXX: g++-11

    steps:
      - uses: actions/checkout@v2

      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 11
          platform: x64

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DABU_HEADER_CHECKS=ON

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}} --output-on-failure
  
  Linux-Clang:
    needs: [clang-tidy, sonarqube]
    runs-on: ubuntu-20.04 
    strategy:
      matrix:
        build_type: [Debug, Release]
    
    name: "üêß clang-12 / ${{matrix.build_type}}" 
    env:
      CC: clang-12
      CXX: clang++-12

    steps:
      - uses: actions/checkout@v2

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DABU_HEADER_CHECKS=ON

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}} --output-on-failure
        
  Mac-GCC:
    needs: [clang-tidy, sonarqube]
    runs-on: macos-10.15

    strategy:
      matrix:
        build_type: [Debug, Release]
    
    name: "üçé gcc-11 / ${{matrix.build_type}}" 

    env:
      CC: gcc-11
      CXX: g++-11

    steps:
      - uses: actions/checkout@v2

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DABU_HEADER_CHECKS=ON

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}} --output-on-failure

  Windows-MSBuild-Clang:
    needs: [clang-tidy, sonarqube]
    runs-on: windows-2019

    strategy:
      matrix:
        arch: [Win32, x64]
        build_type: [Debug, Release]

    name: "üíª ClangCL / ${{matrix.arch}} / ${{matrix.build_type}}" 

    steps:
      - uses: actions/checkout@v2

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DABU_HEADER_CHECKS=ON

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}} --output-on-failure


  Windows-MSBuild-cl:
    needs: [clang-tidy, sonarqube]
    runs-on: windows-2019

    strategy:
      matrix:
        toolset: [host=x64, host=x86]
        arch: [Win32, x64]
        build_type: [Debug, Release]

    name: "üíª ${{matrix.toolset}} / ${{matrix.arch}} / ${{matrix.build_type}}" 

    steps:
      - uses: actions/checkout@v2

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -T ${{matrix.toolset}} -A ${{matrix.arch}} -DCMAKE_BUILD_TYPE=Debug -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DABU_HEADER_CHECKS=ON

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}} --output-on-failure
